/******************************************************************
 Readme file for Little Log File System
 CSC360 Assignment3

 Name:Tong Zhang
 StuID: V00926513
 Date: 04/01/2020
******************************************************************/


*** Achievements of the Assignment:

	1. Manipulate a simulated vdisk, and format vdisk with Little Log File System (LLFS)
	2. LLFS supports:
		a. reading and writing of files in the root directory.
		b. creation of sub-directories.
		c. reading and writing of files in any directory.
		d. deletion of files and directories.
	3. Implemented a fsck strategy to handle crash. Make LLFS robust, so that the file 
		system is less likely to be corrupted if the machine it is running on crashes.
	4. Multiple test files used to exercise all functionality.


*** Project Structure:

	    AS3
	     |----README.md
	     |----Makefile
	     |----report.txt
	     |
	     |----disk
	     |		|-disk.h
	     |		|-disk.c
	     |	    |_vdisk
	     |
	     |----io
	     |     |-File.h
	     |     |_File.c
	     |
	     |----apps
	     |	    |-Text.txt
	     |		|-Shelltest.h
	     |		|-Shelltest.c
	     |		|-test01.c
	     |		|-test02.c
	     |		|-test03.c
	     |		|-test04.c
	     |		|-test05.c
	     |		|-test06.c	     
	     |		|-test07.c
	     |		|-test08.c
	     |______|_test09.c


*** Simplifying Assumptions:
	Only one thread will ever manipulate files.
	All pathnames used are absolute 
	Directories can only be created one “level” at a time.
	Similar reasoning applies to the removal of directories.
	A directory may be deleted only if it is empty.
	
	
*** Test files walk through: 
(In all tests: inode-maps and blocklists will print out some times fot the ease of check)
	Assumption: test files are sequentially performed, from test01, test02... test09.
				Shelltest could run independently, has the option to Initialize the Vdisk.
				
	test01: § tests simple functionality: read/write to vdisk; initialize vdisk.
			Notice: after this test, the vdisk was modified, no longer valid format, 
			needs do InitLLFS() before later operation.
	
	test02: § Test Initiallization of vdisk: creation and mounting;
  			§ Test loading disk information to memory
  			§ Test creating root directory
  			§ Test creating flat file under root directory
  			§ Test creating sub-directories
  			§ Test updating inodes-map, block list

	test03: Assumption: test2 was performed before this test. Vdisk properly
    		initialized, and few files and folders added.
 			§ Test opening an existing valid vdisk with data inside.
 			§ Test writing the file in root directory
 			§ Test writing the file in sub-directory
 			§ Test update size of files and folders
 			Notice: Cannot be used to test a un-formatted disk
 			
 	test04: Assumption: test2 and test3 was performed before this test. Vdisk properly
    		initialized, and few files and folders added and written.
 			§ Test reading the file in root directory
 			§ Test reading the file in sub-directory
 			Notice: Cannot be used to test a un-formatted disk
 			
 	test05: Assumption: test2 and test3 was performed before this test. Vdisk properly
    		initialized, and few files and folders added and written.
 			§ Test deletion of files and directories
 	        Notice: Cannot be used to test a un-formatted disk
 	        
 	test06: This is a scenario 1 crash simulator. crashes that occur after free blocks
 	        have been allocated to a file. For example, crash occurs during the Writing() 
 	        function, after free blocks been allocated.
 			§ Assumption: test2,3,4,5 was sequentially performed before this test.
			Notice: Cannot be used to test a un-formatted disk
			
	test07: test fsck from crushed disk, this tests the fsck function for a crushed vdisk.
 			Assumption: test2,3,4,5,6 was sequentially performed before this test.
 			§ Test the Robust of LLFS, the approach of "fsck"
 			§ Handle two scenarios: crashes that occur after free blocks have been 
 			allocated to a file, and crashes that occur just after blocks have been 
 			removed from the freelist. This tests the crashed scenario 1;
 			Notice: Cannot be used to test a un-formatted disk
 			
    test08: This is a scenario 2 crash simulator. crashes that occur just after blocks 
    		have been removed from the freelist. For example, crash occurs during the 
    		Writing() function, just after blockes been removed.
 			Assumption: test2,3,4,5 was sequentially performed before this test.
			Notice: Cannot be used to test a un-formatted disk
	
	test09: Same as test07, but this one tests the fsck to handle the Scenario2 crash.
	
	Shelltest: A interactive interface could be used to play around the vdisk. 
			   Functions include "cd", "help", "exit", "pwd", "mkdir", "touch", "write",
			    "read", "rm", "ls".
			   some usages(assumption: files under current directory):
			   § cd <directory>		//change current directory
			   § mkdir <name>		//create directory 
			   § touch <name>		//create flat file
			   § write <filename>	//write into the flatfile, will prompt input content
			   § read <filename>    //read content in the flatfile, print it out 
			   § rm <filename>    	//delete a file or an empty directory
			   § ls     			//show directories and flat files under current folder
			   § map				//print out data structure


*** Vdisk layout:
	Blocks 0-9 were reserved for special purpose, usage shown in the comment of File.c in
	void InitLLFS()
	More details in report.txt	   
	
*** Functions: 
	The specification of functions were written in the disk.h and File.h files.
	The	specification of shell functions were written in the Shelltest.h file.
	
*** Reference:
	CourseSpace CSC360 Forum;
	CSC360 Lecture materials;
	CSC360 Tutorial materials;
		
*** Possible bugs:
	Possible Memory leak.
	
	
*** Demo script of using the "Shelltest" 
(For the ease of reading, not include Vdisk process printout here):
------------------------------------------------------------------------------------

(base) Tongs-MBP:apps tongzhang$ ./Shelltest 
Welcome to SEEsh!
Initialze the Vdisk? Y/N
Y
? ? pwd
/root
? ls
[This is an empty folder.]
? mkdir folder1
----------------------------
New Folder folder1 created.
files structure:
  /root             [Total size:0]
    |--folder1      [i#:1 size:0]
----------------------------

? ls
folder1 [0bytes]
? mkdir folder2
----------------------------
New Folder folder2 created.
files structure:
  /root             [Total size:0]
    |--folder1      [i#:1 size:0]
    |--folder2      [i#:2 size:0]
----------------------------

? ls
folder1 [0bytes]
folder2 [0bytes]
? cd folder1
? ls
[This is an empty folder.]
? mkdir folder3
----------------------------
New Folder folder3 created.
files structure:
  /root             [Total size:0]
    |--folder1      [i#:1 size:0]
        |--folder3      [i#:3 size:0]
    |--folder2      [i#:2 size:0]
----------------------------

? ls
folder3 [0bytes]
? cd folder3
? ls
[This is an empty folder.]
? pwd
/root/folder1/folder3
? touch readme
----------------------------
New File readme created.
files structure:
  /root             [Total size:0]
    |--folder1      [i#:1 size:0]
        |--folder3      [i#:3 size:0]
            |--readme      [i#:4 size:0]
    |--folder2      [i#:2 size:0]
----------------------------

? write readme
 Please type in the content you want to write:
 Hello world, this is my LLFS!
----------------------------
Writing content in disk
  aim path '/root/folder1/folder3/readme' valid
  write 30 bytes to /root/folder1/folder3/readme
    write to location:8704
All content has been written.
----------------------------

? ls
readme [30bytes]
? read readme
----------------------------
Reading content in disk
  aim path '/root/folder1/folder3/readme' valid
Hello world, this is my LLFS!

? ls     
readme [30bytes]
? rm readme

----------------------------
Start deletion
  aim path '/root/folder1/folder3/readme' valid
  folder3 size-30=0
   folder1 size-30=0
Done deletion.
----------------------------

? ls
[This is an empty folder.]
? cd ..
? ls
folder3 [0bytes]
? rm folder3
----------------------------
Start deletion
  aim path '/root/folder1/folder3' valid
  folder1 size-0=0
   root size-0=30
Done deletion.
----------------------------


? ls
[This is an empty folder.]
? cd ,,
? cd ..
? ls
folder1 [0bytes]
folder2 [0bytes]
? pwd
/root
? exit
